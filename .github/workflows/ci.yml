name: CI
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
env:
  PGPASSWORD: submitty_dbuser
  PHP_USER: submitty_php
  PHP_GROUP: submitty_php
  CGI_USER: submitty_cgi
  SUBMITTY_DATA_DIR: /var/local/submitty
  SUBMITTY_INSTALL_DIR: /usr/local/submitty
  SUBMITTY_REPOSITORY: /usr/local/submitty/GIT_CHECKOUT/Submitty
  POSTGRES_HOST: localhost
  PHP_VER: 8.1
  NODE_VERSION: 20
  PYTHON_VERSION: "3.10"
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  js-unit:
    name: JavaScript Unit
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: site
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cache-node-modules-
      - run: npm ci
      - run: npm run test
      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          files: site/tests/report/jest/clover.xml
          flags: js
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}
  php-unit:
    name: PHP Unit
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: site
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@2.33.0
        with:
          php-version: ${{ env.PHP_VER }}
          extensions: imagick
          coverage: pcov
      - name: Cache Composer
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Install Composer
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Install dependencies
        run: composer install --prefer-dist --dev
      - name: Run php unit tests
        run: php vendor/bin/phpunit
      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          files: site/tests/report/clover.xml
          flags: php
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}
  python-unit:
    name: Python Unit
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache Pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ github.job }}-pip-${{ hashFiles('**/system_requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-pip-
      - name: Install python libraries
        run: |
          python3 -m pip install -r .setup/pip/system_requirements.txt
          python3 -m pip install coverage # Testing util.
      # Submitty utils install & unit testing, must be put before auto grader
      # testing as auto grader depends on submitty utils to function.
      - name: Run python_submitty_utils python unit tests
        working-directory: python_submitty_utils
        run: |
          pip3 install .
  check-changed-files:
    name: Check Changed Files
    runs-on: ubuntu-22.04
    needs: [js-unit, php-unit, python-unit]
    outputs:
      run_ansible_lint: ${{ steps.check.outputs.run_ansible_lint }}
      run_css_lint: ${{ steps.check.outputs.run_css_lint }}
      run_js_lint: ${{ steps.check.outputs.run_js_lint }}
      run_twig_lint: ${{ steps.check.outputs.run_twig_lint }}
      run_php_lint: ${{ steps.check.outputs.run_php_lint }}
      run_python_lint: ${{ steps.check.outputs.run_python_lint }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch base branch for PR
        if: github.event_name == 'pull_request'
        run: git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
      - name: Check changed files
        id: check
        run: |
          case "${{ github.event_name }}" in
            "workflow_dispatch")
              for key in ansible css js twig php python; do
                echo "run_${key}_lint=true" >> $GITHUB_OUTPUT
              done
              exit 0
              ;;
            "pull_request")
              diff_base=${{ github.base_ref }}
              ;;
            *)
              diff_base=${{ github.event.before }}
              ;;
          esac
          changed_files=$(git diff --name-only "$diff_base" "${{ github.sha }}")
          changed_ansible=$(printf "%s\n" "$changed_files" | grep -E '^\.setup/ansible/' || true)
          changed_css=$(printf "%s\n" "$changed_files" | grep -E '.*\.(css|scss)$' || true)
          changed_js=$(printf "%s\n" "$changed_files" | grep -E '.*\.(js|jsx|ts|tsx)$' || true)
          changed_twig=$(printf "%s\n" "$changed_files" | grep -E '(app|public|room_templates)/.*\.twig$' || true)
          changed_php=$(printf "%s\n" "$changed_files" | grep -E '.*\.php$' || true)
          changed_python=$(printf "%s\n" "$changed_files" | grep -E '.*\.py$' || true)
          [ -n "$changed_ansible" ] && echo "run_ansible_lint=true" >> $GITHUB_OUTPUT || echo "run_ansible_lint=false" >> $GITHUB_OUTPUT
          [ -n "$changed_css" ] && echo "run_css_lint=true" >> $GITHUB_OUTPUT || echo "run_css_lint=false" >> $GITHUB_OUTPUT
          [ -n "$changed_js" ] && echo "run_js_lint=true" >> $GITHUB_OUTPUT || echo "run_js_lint=false" >> $GITHUB_OUTPUT
          [ -n "$changed_twig" ] && echo "run_twig_lint=true" >> $GITHUB_OUTPUT || echo "run_twig_lint=false" >> $GITHUB_OUTPUT
          [ -n "$changed_php" ] && echo "run_php_lint=true" >> $GITHUB_OUTPUT || echo "run_php_lint=false" >> $GITHUB_OUTPUT
          [ -n "$changed_python" ] && echo "run_python_lint=true" >> $GITHUB_OUTPUT || echo "run_python_lint=false" >> $GITHUB_OUTPUT
  lint:
    name: Language Lint
    runs-on: ubuntu-22.04
    needs: [js-unit, php-unit, python-unit, check-changed-files]
    strategy:
      fail-fast: false
      matrix:
        language: [ansible, css, js, twig, php, python]
    # gating handled in steps via gate step using a switch-case
    steps:
      - uses: actions/checkout@v4
      - name: Gate lint by changed files
        id: gate
        run: |
          case "${{ matrix.language }}" in
            ansible)
              flag="${{ needs.check-changed-files.outputs.run_ansible_lint }}"
              ;;
            css)
              flag="${{ needs.check-changed-files.outputs.run_css_lint }}"
              ;;
            js)
              flag="${{ needs.check-changed-files.outputs.run_js_lint }}"
              ;;
            twig)
              flag="${{ needs.check-changed-files.outputs.run_twig_lint }}"
              ;;
            php)
              flag="${{ needs.check-changed-files.outputs.run_php_lint }}"
              ;;
            python)
              flag="${{ needs.check-changed-files.outputs.run_python_lint }}"
              ;;
            *)
              flag="false"
              ;;
          esac
          echo "should_run=$flag" >> $GITHUB_OUTPUT

      - name: Setup Node
        if: (matrix.language == 'css' || matrix.language == 'js') && steps.gate.outputs.should_run == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node Modules
        if: (matrix.language == 'css' || matrix.language == 'js') && steps.gate.outputs.should_run == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cache-node-modules-

      - name: npm ci
        if: (matrix.language == 'css' || matrix.language == 'js') && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: npm ci

      - name: Run stylelint
        if: matrix.language == 'css' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: npm run css-stylelint

      - name: Run Prettier Format
        if: matrix.language == 'css' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: npm run prettier:fix

      - name: Check Prettier Changes
        if: matrix.language == 'css' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: git diff --exit-code

      - name: Run eslint
        if: matrix.language == 'js' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: npm run eslint

      - name: Run npm build (tsc and esbuild)
        if: matrix.language == 'js' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: npm run build

      - name: Setup PHP
        if: (matrix.language == 'twig' || matrix.language == 'php') && steps.gate.outputs.should_run == 'true'
        uses: shivammathur/setup-php@2.33.0
        with:
          php-version: ${{ env.PHP_VER }}

      - name: Cache Composer
        if: (matrix.language == 'twig' || matrix.language == 'php') && steps.gate.outputs.should_run == 'true'
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Install Composer
        if: (matrix.language == 'twig' || matrix.language == 'php') && steps.gate.outputs.should_run == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        if: (matrix.language == 'twig' || matrix.language == 'php') && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: composer install --prefer-dist --dev

      - name: Lint Twig Templates
        if: matrix.language == 'twig' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: php scripts/symfony_console lint:twig --format=github app/ public/ room_templates/

      - name: Check syntax
        if: matrix.language == 'php' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: find -L . -path ./vendor -prune -o -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l

      - name: Lint PHP code
        if: matrix.language == 'php' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: |
          php vendor/bin/phpcs --version
          php vendor/bin/phpcs

      - name: Static analysis
        if: matrix.language == 'php' && steps.gate.outputs.should_run == 'true'
        working-directory: site
        run: |
          php vendor/bin/phpstan --version
          php vendor/bin/phpstan analyze app public/index.php socket/index.php

      - name: Setup Python
        if: matrix.language == 'python' && steps.gate.outputs.should_run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Pip
        if: matrix.language == 'python' && steps.gate.outputs.should_run == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ github.job }}-pip-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-pip-

      - name: Install python libraries
        if: matrix.language == 'python' && steps.gate.outputs.should_run == 'true'
        run: python3 -m pip install -r .setup/pip/dev_requirements.txt

      - name: Run pre-commit
        if: matrix.language == 'python' && steps.gate.outputs.should_run == 'true'
        run: pre-commit run --all-files

      - name: Run ansible-lint
        if: matrix.language == 'ansible' && steps.gate.outputs.should_run == 'true'
        uses: ansible/ansible-lint@main
        with:
          args: .setup/ansible
